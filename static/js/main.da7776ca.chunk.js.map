{"version":3,"sources":["firebase.js","constants.js","useAudio.js","Keyboard.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","keybindings","files","useAudio","url","useState","Audio","audio","playing","setPlaying","useEffect","play","pause","currentTime","Keyboard","props","note","className","keybinding","playMusic","stopAndReset","onKeyDown","e","KeyboardEvent","key","toLowerCase","target","dataset","onKeyUp","window","addEventListener","id","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","data-note","toUpperCase","BlackKey","WhiteKey","App","pianoKey","setPianoKey","a","storage","filesUrls","i","length","file","ref","getDownloadURL","push","slice","fetchMyFirebase","innerWidth","isMobile","setMobile","updateKeyboard","removeEventListener","map","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da7776ca.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\"\nimport \"firebase/storage\";\n\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDb8fsKUC2SzSTtaxnKs7p3rW7FUbuNPYY\",\n    authDomain: \"piano-proj3.firebaseapp.com\",\n    projectId: \"piano-proj3\",\n    storageBucket: \"piano-proj3.appspot.com\",\n    messagingSenderId: \"813737327852\",\n    appId: \"1:813737327852:web:4423315d064da6f7d9b9c9\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;\n","// Array of keybindings to be assigned to notes for keyboard use\nconst keybindings = [\n    \"q\",\n    \"2\",\n    \"w\",\n    \"3\",\n    \"e\",\n    \"r\",\n    \"5\",\n    \"t\",\n    \"6\",\n    \"y\",\n    \"7\",\n    \"u\",\n    \"i\",\n    \"9\",\n    \"o\",\n    \"0\",\n    \"p\",\n    \"n\",\n    \"j\",\n    \"m\",\n    \"k\",\n    \",\",\n    \"l\",\n    \".\",\n    \"/\"\n];\n\n// Array of notes used for firebase calls and id's in the dom\nconst files = [\n    \"C3.mp3\",\n    \"Csharp3.mp3\",\n    \"D3.mp3\",\n    \"Dsharp3.mp3\",\n    \"E3.mp3\",\n    \"F3.mp3\",\n    \"Fsharp3.mp3\",\n    \"G3.mp3\",\n    \"Gsharp3.mp3\",\n    \"A3.mp3\",\n    \"Asharp3.mp3\",\n    \"B3.mp3\",\n    \"C4.mp3\",\n    \"Csharp4.mp3\",\n    \"D4.mp3\",\n    \"Dsharp4.mp3\",\n    \"E4.mp3\",\n    \"F4.mp3\",\n    \"Fsharp4.mp3\",\n    \"G4.mp3\",\n    \"Gsharp4.mp3\",\n    \"A4.mp3\",\n    \"Asharp4.mp3\",\n    \"B4.mp3\",\n    \"C5.mp3\"\n];\n\nexport {\n    keybindings,\n    files,\n};","import { useState, useEffect } from \"react\";\n\n// based on https://www.codegrepper.com/code-examples/javascript/react+play+audio+from+url\nconst useAudio = url => {\n    // no setAudio needed because audio doesn't need to be changed\n    // since function runs for each note, only one url is assigned per note\n    const [audio] = useState(new Audio(url));\n    // used to change state true/false to play audio\n    const [playing, setPlaying] = useState(false);\n\n    const playMusic = () => {\n        setPlaying(true);\n    };\n\n    const stopAndReset = () => {\n        setPlaying(false);\n    };\n\n    useEffect(() => {\n        // if statement to play or pause and reset\n        if (playing) {\n            audio.play();\n        } else {\n            audio.pause();\n            audio.currentTime = 0;\n        }\n    }, [playing, audio] );\n\n    return [playMusic, stopAndReset]\n}\n\nexport default useAudio;","import React, { useState, useEffect } from \"react\";\nimport useAudio from \"./useAudio.js\"\n\nfunction Keyboard(props) {\n    // destructuring props to be more easily used\n    const {note, className, keybinding} = props;\n    \n    // calling useAudio function to make audio url for each note\n    const [playMusic, stopAndReset] = useAudio(note.url);\n\n    // used to change state true/false to toggle css playing class \n    const [playing, setPlaying] = useState(false);\n\n    useEffect( () => {\n        // adding event listeners for playing piano with keyboard\n        window.addEventListener(\"keydown\", onKeyDown);\n        window.addEventListener(\"keyup\", onKeyUp);\n    })\n\n    function onMouseDown(e) {\n        playMusic();\n        setPlaying(true);\n    };\n\n    function onMouseUp(e) {\n        stopAndReset();\n        setPlaying(false);\n    }\n\n    function onKeyDown(e) {\n        // if statement to target the audio of key pressed down\n        // specific keybinding event or tab selected enter\n        if(e instanceof KeyboardEvent && (e.key.toLowerCase() === keybinding || (e.key === \"Enter\" && e.target.dataset.note === note.key))){\n            playMusic();\n            setPlaying(true);\n        }\n    }\n\n    function onKeyUp(e) {\n        if(e instanceof KeyboardEvent && (e.key.toLowerCase() === keybinding || (e.key === \"Enter\" && e.target.dataset.note === note.key))){\n            stopAndReset();\n            setPlaying(false);\n        }\n    }\n\n    // event listener functions for touch screens\n    function onTouchStart(e) {\n        playMusic();\n        setPlaying(true);\n    }\n\n    function onTouchEnd(e) {\n        stopAndReset();\n        setPlaying(false);\n    }\n\n    return (\n        <button\n            // ternary operator checking playing state to toggle css playing class\n            className={ `${className} ${note.key} ${playing ? \"playing\" : \"\"}`}\n            id={ note.key }\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n            onKeyDown={() => onKeyDown()}\n            onKeyUp={() => onKeyUp()}\n            onTouchStart={onTouchStart}\n            onTouchEnd={onTouchEnd}\n            data-note={note.key}\n        >\n            {keybinding.toUpperCase()}\n        </button>\n    )\n}\n\n// functions called in App.js to render black/white keys that call Keyboard to return information needed\nfunction BlackKey(props) {\n    return <Keyboard \n                keybinding={props.keybinding}\n                className=\"blackKey\"\n                note={props.note} />;\n}\n\nfunction WhiteKey(props) {\n    return <Keyboard \n                keybinding={props.keybinding}\n                className=\"whiteKey\"\n                note={props.note} />;\n}\n\nexport {\n    Keyboard,\n    WhiteKey,\n    BlackKey\n};\n    ","import './App.css';\nimport firebase from \"./firebase.js\";\n\nimport { keybindings, files } from \"./constants.js\"\nimport { useState, useEffect } from \"react\";\nimport { BlackKey, WhiteKey } from \"./Keyboard.js\";\n\nfunction App() {\n  const [pianoKey, setPianoKey] = useState([]);\n\n  useEffect( () => {\n    async function fetchMyFirebase() {\n      const storage = firebase.storage();\n\n      const filesUrls = [];\n\n      // For loop to get download URL from firebase storage for each note\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        const url = await storage\n        .ref(`/${file}`)\n        .getDownloadURL();\n        // Push data from firebase to an array to be used in setPianoKey\n        filesUrls.push({\n          key: file.slice(0, -4),\n          url: url\n        });\n      }\n      setPianoKey(filesUrls);\n    };\n    fetchMyFirebase();\n  }, []);\n\n  const [isMobile, setMobile] = useState(window.innerWidth <= 984);\n\n  const updateKeyboard = () => {\n    setMobile(window.innerWidth <= 984);\n  };\n\n  useEffect( () => {\n    window.addEventListener(\"resize\", updateKeyboard);\n    return () => window.removeEventListener(\"resize\", updateKeyboard);\n  });\n\n    // RETURN ==========================================\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Pia<span>n</span>&sup2;o</h1>\n      </header>\n\n      <main>\n        <div className=\"wrapper\">\n          <p className=\"computerInstructions\"> Please use your mouse to click on the keys or \n            use your keyboard with the letters shown to play the pian&sup2;o </p>\n\n            <p className=\"mobileInstructions\"> For best experience, please rotate mobile device into landscape mode </p>\n        </div>\n        <div className=\"keyboard\">\n          <div id=\"redFelt\"></div>\n          {/* map through array to display keys on dom */}\n            {\n              pianoKey.map( (note, i) => {\n                if (!isMobile || (isMobile && i <= 12)) {\n                  return i===1 || i===3 || i===6 || i===8 || i===10 || i===13 || i===15 ||i===18 || i===20 || i===22 ?\n                  <BlackKey keybinding={keybindings[i]}\n                  key={i}\n                  note={note} />\n                  :\n                  <WhiteKey keybinding={keybindings[i]}\n                  key={i} \n                  note={note} />\n                }\n                return <></>;\n                // ternary operator to display white or black keys\n              })\n          }\n          </div>\n      </main>\n\n      <footer>\n        <h3>Created by <a href=\"https://github.com/midnightorca\" target=\"_blank\" rel=\"noreferrer\">Natalie Tso</a> and <a href=\"https://github.com/NateY98\" target=\"_blank\" rel=\"noreferrer\">Nate Yeow</a> at <a href=\"https://junocollege.com/\" target=\"_blank\" rel=\"noreferrer\">Juno College</a></h3>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}